cmake_minimum_required(VERSION 3.16 FATAL_ERROR)
set(CMAKE_OSX_DEPLOYMENT_TARGET "11" CACHE STRING "Target MacOS Version")
mark_as_advanced(CMAKE_OSX_DEPLOYMENT_TARGET)
# the settings below will be automatically configured by the rest of this script
project(PLANC C CXX)
set(PLANC_MAJOR_VERSION 0)
set(PLANC_MINOR_VERSION 8)
set(PLANC_PATCH_VERSION 1)
set(PLANC_VERSION "${PLANC_MAJOR_VERSION}.${PLANC_MINOR_VERSION}.${PLANC_PATCH_VERSION}")
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
include(CheckIncludeFile)
include(CheckCXXCompilerFlag)
# Adhere to GNU filesystem layout conventions
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)
set(CMAKE_C_VISIBILITY_PRESET¶ ON)
set(CMAKE_CXX_VISIBILITY_PRESET¶ ON)
set(CMAKE_CXX_STANDARD 17)
cmake_host_system_information(RESULT _host_name QUERY FQDN)
message(STATUS, "host name = ${_host_name}")
string(FIND ${_host_name} "rhea" RHEA_FOUND)
string(FIND ${_host_name} "eos" EOS_FOUND)
string(FIND ${_host_name} "titan" TITAN_FOUND)
string(FIND ${_host_name} "summit" SUMMIT_FOUND)
message(STATUS, "RHEA = ${RHEA_FOUND}")
message(STATUS, "EOS = ${EOS_FOUND}")
message(STATUS, "TITAN = ${TITAN_FOUND}")
message(STATUS, "SUMMIT = ${SUMMIT_FOUND}")
if(NOT (TITAN_FOUND EQUAL -1 AND SUMMIT_FOUND EQUAL -1))
    set(CMAKE_BUILD_CUDA 1)
endif()
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)

set(MKL_DIR "${PROJECT_SOURCE_DIR}/cmake")
find_package(MKL QUIET)
if(MKL_FOUND AND NOT DEFINED BLAS_VENDOR)
    message(STATUS "found MKL")
    set(USE_MKL)
    set(BLAS_LIBRARIES "${MKL_LIBRARIES}")
    set(LAPACK_LIBRARIES "${MKL_LAPACK_LIBRARIES}")
    set(CBLAS_H_DIR "${MKL_INCLUDE_DIR}")
    add_compile_definitions("MKL_FOUND")
else()
    find_package(BLAS REQUIRED)
    find_package(LAPACK REQUIRED)
endif()

if(NOT(APPLE AND(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES arm64)))
    find_package(OpenMP)
endif()


find_package(Armadillo CONFIG REQUIRED)
find_package(HighFive CONFIG REQUIRED)
find_package(indicators CONFIG REQUIRED)
find_package(HWLOC REQUIRED)

if(OpenMP_CXX_FOUND)
    add_compile_options(${OpenMP_CXX_FLAGS})
    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR MINGW)
        add_link_options(${OpenMP_CXX_FLAGS})
    endif()
endif()

if(MSVC)
    check_cxx_compiler_flag("/fp:fast" MSVC_FAST_FLOAT)
    if(MSVC_FAST_FLOAT)
        add_compile_options("/fp:fast")
    endif()
    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "AMD64")
        check_cxx_compiler_flag("/arch:AVX" ARCH_AVX)
        if(ARCH_AVX)
            add_compile_options("/arch:AVX")
        endif()
    elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "ARM64")
        check_cxx_compiler_flag("/arch:armv8.2" ARCH_ARM82)
        if(ARCH_ARM82)
            add_compile_options("/arch:armv8.2")
        endif()
    endif()
else()
    check_cxx_compiler_flag("-funsafe-math-optimizations" UNSAFE_MATH)
    if(UNSAFE_MATH)
        add_compile_options("-funsafe-math-optimizations")
    endif()
    check_cxx_compiler_flag("-ffinite-math-only" FINITE_MATH)
    if(FINITE_MATH)
        add_compile_options("-ffinite-math-only")
    endif()
    check_cxx_compiler_flag("-fno-trapping-math" TRAPPING_MATH)
    if(TRAPPING_MATH)
        add_compile_options("-fno-trapping-math")
    endif()
    check_cxx_compiler_flag("-fno-math-errno" ERRNO_MATH)
    if(ERRNO_MATH)
        add_compile_options("-fno-math-errno")
    endif()
    check_cxx_compiler_flag("-fno-signed-zeros" UNSIGNED_ZERO)
    if(UNSIGNED_ZERO)
        add_compile_options("-fno-signed-zeros")
    endif()
    check_cxx_compiler_flag("-freciprocal-math" RECIPROCAL_MATH)
    if(RECIPROCAL_MATH)
        add_compile_options("-freciprocal-math")
    endif()
    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES "AMD64")
        check_cxx_compiler_flag("-mavx" ARCH_AVX)
        if(ARCH_AVX)
            add_compile_options("-mavx")
        endif()
        check_cxx_compiler_flag("-mpopcnt" HAS_POPCNT)
        if(HAS_POPCNT)
            add_compile_options("-mpopcnt")
        endif()
    endif()
    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch64" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES "ARM64")
        check_cxx_compiler_flag("-march=armv8.2-a+simd" ARCH_ARM82)
        if(ARCH_ARM82)
            add_compile_options("-march=armv8.2-a+simd")
        endif()
    endif()
endif()

if(BLAS_openblas_WORKS EQUAL 1)
    find_package(OpenBLAS CONFIG REQUIRED)
    set(CBLAS_H_DIR $<INSTALL_INTERFACE:OpenBLAS::OpenBLAS>)
    set(USING_OPENBLAS TRUE)
    set(OPENBLAS_DEFINED "HAVE_OPENBLAS_CBLAS_H")
    add_compile_definitions("HAVE_OPENBLAS_CBLAS_H")
endif()
if(NOT APPLE AND NOT USE_MKL AND NOT USING_OPENBLAS)
    set(CBLAS_H_DIR CACHE PATH "Directory containing cblas.h")
    if(CBLAS_H_DIR)
        include_directories(BEFORE ${CBLAS_H_DIR})
    else()
        check_include_file("cblas.h" CBLAS_HEADER)
        if(NOT CBLAS_HEADER)
            check_include_file("flexiblas/cblas.h" FLEXIBLAS_HEADER)
            if(FLEXIBLAS_HEADER)
                add_compile_definitions("HAVE_FLEXIBLAS_CBLAS_H")
            else()
                message(FATAL_ERROR "no cblas header, please set include directory with CBLAS_H_DIR variable")
            endif()
        endif()
    endif()
endif()

add_library(progressWrapper OBJECT ${PROJECT_SOURCE_DIR}/common/progressWrapper.cpp)
target_link_libraries(progressWrapper PRIVATE indicators::indicators)

add_library(utils OBJECT ${PROJECT_SOURCE_DIR}/common/utils.cpp)
target_include_directories(utils PUBLIC ${ARMADILLO_INCLUDE_DIRS})
get_property(ARMA_DEPS TARGET armadillo PROPERTY INTERFACE_LINK_LIBRARIES)
target_link_libraries(utils PUBLIC ${ARMA_DEPS})
add_library(hw_detect OBJECT ${PROJECT_SOURCE_DIR}/common/hw_detect.c)
target_include_directories(hw_detect PRIVATE ${HWLOC_INCLUDEDIR})
target_link_directories(hw_detect PUBLIC ${HWLOC_LIBDIR})
target_link_libraries(hw_detect PUBLIC $<$<BOOL:${pkgcfg_lib_HWLOC_hwloc}>:${pkgcfg_lib_HWLOC_hwloc}> $<$<BOOL:${HWLOC_LIBRARIES}>:${HWLOC_LIBRARIES}>)
add_library(detect_blas OBJECT ${PROJECT_SOURCE_DIR}/common/detect_blas.c)
if(WIN32)
    find_package(dlfcn-win32 CONFIG REQUIRED)
    target_link_libraries(detect_blas PUBLIC dlfcn-win32::dl)
endif()
if(APPLE)
    target_link_libraries(hw_detect INTERFACE "-framework Foundation" "-framework IOKit" "-framework OpenCL")
endif()
set(PLANC_COMMON ${PROJECT_SOURCE_DIR}/common)
set(NNLS_SRC ${PROJECT_SOURCE_DIR}/nnls)
message(STATUS "NNLS_SOURCE_DIR =  ${NNLS_SRC}")
message(STATUS "NMF_SOURCE_DIR =  ${NMF_SOURCE_DIR}")
message(STATUS "NMFLIB_COMMON =  ${PLANC_COMMON}")

add_subdirectory(nmf)